// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoSi.OrdersService.Database;

#nullable disable

namespace PhotoSi.OrdersService.Database.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20250531071903_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("PhotoSi.OrdersService.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("186aa5d6-77dd-4b90-bc69-b487ba9c3893"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Currency = "EUR",
                            UserId = new Guid("0d4bdc20-95dd-4fe3-98b3-ffac3eadae6d"),
                            Version = 1
                        });
                });

            modelBuilder.Entity("PhotoSi.OrdersService.Models.OrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLines", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("25ae29d4-90f6-41cf-8820-824825f6db1b"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "First order line",
                            OrderId = new Guid("186aa5d6-77dd-4b90-bc69-b487ba9c3893"),
                            ProductId = new Guid("ccbd7f1e-be07-4e8e-ab99-9ddc97184ebd"),
                            Quantity = 2,
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("6ebb39f3-c2a3-4859-82eb-ad39335c6cb9"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Second order line",
                            OrderId = new Guid("186aa5d6-77dd-4b90-bc69-b487ba9c3893"),
                            ProductId = new Guid("7da4e09c-70a4-49e9-8079-e2c303dc13a5"),
                            Quantity = 5,
                            Version = 1
                        });
                });

            modelBuilder.Entity("PhotoSi.OrdersService.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccbd7f1e-be07-4e8e-ab99-9ddc97184ebd"),
                            CategoryName = "Stampe",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Stampa di una foto in formato 10x15 cm",
                            IsAvailable = true,
                            Name = "Stampa Foto 10x15",
                            Price = 10.50m,
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("7da4e09c-70a4-49e9-8079-e2c303dc13a5"),
                            CategoryName = "Gadgets",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tazza con stampa personalizzata",
                            IsAvailable = true,
                            Name = "Tazza Personalizzata",
                            Price = 15.00m,
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("00f04905-a718-4d28-b652-3237cd4ccbee"),
                            CategoryName = "Biglietti",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Biglietto di auguri personalizzato per ogni occasione",
                            IsAvailable = true,
                            Name = "Biglietto di Auguri",
                            Price = 5.00m,
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("56abd4b5-1c48-4296-84cf-ee05e7862780"),
                            CategoryName = "Gadgets",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Calendario personalizzato da tavolo",
                            IsAvailable = true,
                            Name = "Calendario da Tavolo",
                            Price = 20.00m,
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("fa3ffd88-f6a5-4599-9408-e6d655588b52"),
                            CategoryName = "Stampe",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Poster di grandi dimensioni per decorare le pareti",
                            IsAvailable = true,
                            Name = "Poster 50x70",
                            Price = 30.00m,
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("b3eaf4bd-2e57-4041-8cf0-6a19a55c9fb9"),
                            CategoryName = "Biglietti",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Album fotografico personalizzato per conservare i tuoi ricordi",
                            IsAvailable = true,
                            Name = "Album Fotografico",
                            Price = 25.00m,
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("3e1a498f-9008-4030-bea9-9f79e5e92eb3"),
                            CategoryName = "Stampe",
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Stampa di alta qualità su tela per un effetto artistico",
                            IsAvailable = true,
                            Name = "Stampa su Tela",
                            Price = 45.00m,
                            Version = 1
                        });
                });

            modelBuilder.Entity("PhotoSi.OrdersService.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d4bdc20-95dd-4fe3-98b3-ffac3eadae6d"),
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Mario",
                            IsAvailable = true,
                            LastName = "Rossi",
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("dc1dc650-ee84-4f3d-9cca-a0baf9421d4e"),
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Luca",
                            IsAvailable = true,
                            LastName = "Bianchi",
                            Version = 1
                        },
                        new
                        {
                            Id = new Guid("57b9385d-6b77-4db8-a1a0-510d54631257"),
                            CreatedAt = new DateTime(2025, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            FirstName = "Giulia",
                            IsAvailable = true,
                            LastName = "Verdi",
                            Version = 1
                        });
                });

            modelBuilder.Entity("PhotoSi.OrdersService.Models.Order", b =>
                {
                    b.HasOne("PhotoSi.OrdersService.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhotoSi.OrdersService.Models.OrderLine", b =>
                {
                    b.HasOne("PhotoSi.OrdersService.Models.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoSi.OrdersService.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PhotoSi.OrdersService.Models.User", b =>
                {
                    b.OwnsOne("PhotoSi.OrdersService.Models.ShipmentAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Country");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("PostalCode");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Street");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("0d4bdc20-95dd-4fe3-98b3-ffac3eadae6d"),
                                    City = "Roma",
                                    Country = "Italia",
                                    PostalCode = "00100",
                                    Street = "Via Roma 1"
                                },
                                new
                                {
                                    UserId = new Guid("dc1dc650-ee84-4f3d-9cca-a0baf9421d4e"),
                                    City = "Milano",
                                    Country = "Italia",
                                    PostalCode = "20100",
                                    Street = "Via Milano 2"
                                },
                                new
                                {
                                    UserId = new Guid("57b9385d-6b77-4db8-a1a0-510d54631257"),
                                    City = "Napoli",
                                    Country = "Italia",
                                    PostalCode = "80100",
                                    Street = "Via Napoli 3"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoSi.OrdersService.Models.Order", b =>
                {
                    b.Navigation("OrderLines");
                });
#pragma warning restore 612, 618
        }
    }
}
